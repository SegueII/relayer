#!/bin/bash
# two-chainz creates two gaiad chains and configures the relayer to

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
CHAIN_DATA="$(pwd)/data"
RELAYER_DIR="$(dirname $SCRIPTDIR)"
RELAYER_CONF="$HOME/.relayer"

# Ensure gaiad is installed
if ! [ -x "$(which gaiad)" ]; then
    echo "Error: gaiad is not installed. Try running 'make build-gaia'" >&2
    exit 1
fi

# Ensure iris is installed
if ! [ -x "$(which iris)" ]; then
    echo "Error: iris is not installed. " >&2
    exit 1
fi

# Display software version for testers
echo "IRIS & GAIA VERSION INFO:"
gaiad version
iris version

# Ensure jq is installed
if [[ ! -x "$(which jq)" ]]; then
    echo "jq (a tool for parsing json in the command line) is required..."
    echo "https://stedolan.github.io/jq/download/"
    exit 1
fi

# Ensure user understands what will be deleted
if [[ -d $CHAIN_DATA ]] && [[ ! "$1" == "skip" ]]; then
    read -p "$(basename $0) will delete \$(pwd)/data and \$HOME/.relayer folders. Do you wish to continue? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Delete data from old runs
rm -rf $CHAIN_DATA &>/dev/null
rm -rf $RELAYER_CONF &>/dev/null

# Stop existing gaiad and iris processes
killall gaiad &>/dev/null
killall iris &>/dev/null

set -e

chainid0=irishub-1
chainid1=cosmoshub-4

echo "Generating gaia and iris configurations..."
mkdir -p $CHAIN_DATA && cd $CHAIN_DATA && cd ../
./scripts/one-chain iris $chainid0 ./data 26657 26656 6060 9090
./scripts/one-chain gaiad $chainid1 ./data 26557 26556 6061 9091

[ -f $CHAIN_DATA/$chainid0.log ] && echo "$chainid0 initialized. Watch file $CHAIN_DATA/$chainid0.log to see its execution."
[ -f $CHAIN_DATA/$chainid1.log ] && echo "$chainid1 initialized. Watch file $CHAIN_DATA/$chainid1.log to see its execution."

# cd $RELAYER_DIR

# echo "Building Relayer..."
# make install

# echo "Generating rly configurations..."
# rly config init
# rly config add-dir configs/bifrost/

# SEED0=$(jq -r '.mnemonic' $CHAIN_DATA/iris/key_seed.json)
# SEED1=$(jq -r '.mnemonic' $CHAIN_DATA/cosmos/key_seed.json)
# echo "Key $(rly keys restore iris testkey "$SEED0") imported from iris to relayer..."
# echo "Key $(rly keys restore cosmos testkey "$SEED1") imported from cosmos to relayer..."
# echo "Creating light clients..."
# sleep 3
# rly light init iris -f
# rly light init cosmos -f
